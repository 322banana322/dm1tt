#include <iostream>
using namespace std;

class Mass
{
private:
	int* arr, size;
public:
	Mass(int arrSize) {

		if (size < 0)
		{
			throw out_of_range("Index error");
		}

		size = arrSize;
		arr = new int[size];

		if (!arr)
		{
			throw bad_alloc();
		}

		for (int i = 0; i < size; i++) {
			arr[i] = i;
		}
	}
	~Mass() {
		delete arr;
	}

	Mass(Mass &Copy) {

		size = Copy.size;
		arr = new int[size];

		if (!arr)
		{
			throw bad_alloc();
		}

		for (int i = 0; i < size; i++) {
			arr[i] = Copy.arr[i];
		}
	}

	void print() {
		for (int i = 0; i < size; i++) {
			cout << arr[i] << " ";
		}
		cout << endl;
	}



	void setArr(int i, int val) {

		if (val > 100 || val < -100)
		{
			throw invalid_argument("value outside the range -100..100");
		}


		if (i >= size || i < 0)
		{
			throw out_of_range("Index error");
		}

	}

	int getArr(int i) {

		if (i >= size || i < 0)
		{
			throw out_of_range("Index error");
		}
		else
		{
			return arr[i];
		}
	}

	void Addition(Mass& Copy) {

		for (int i = 0; i < size; i++) {
			arr[i] = arr[i] + Copy.arr[i];
		}

	}

	void Substruction(Mass& Copy) {
		for (int i = 0; i < size; i++) {
			arr[i] = arr[i] - Copy.arr[i];
		}

	}

	void Dobavznach(int val) {

		if (val > -100 or val < 100) {

			size = size + 1;
			int* newArr = new int[size];
			for (int i = 0; i < size - 1; i++) {

				newArr[i] = arr[i];
			}
			delete arr;
			newArr[size - 1] = val;
			arr = newArr;


		}
	}

	double Distance(Mass& Other)
	{
		if (typeid(Other.arr[0]) != typeid(int) or typeid(arr[0]) != typeid(int))
		{
			throw logic_error("Wrong data type");
		}
		double dist = 0;
		for (int i = 0; i < size; i++) {
			dist = (toInt(arr[i]) - toInt(Other.arr[i])) * (toInt(arr[i]) - toInt(Other.arr[i])) + dist;
		}
		return sqrt(dist);
	}

};

template<typename T>
ostream& operator << (ostream& gg, Mass <T>& array)
{
	for (int i = 0; i < 3; i++)
	{
		gg << i << " - " << array.GetVal(i) << endl;
	}
	return gg;
}


int main()
{
	int size = 0, i = 0;

	Mass a(5);
	try
	{
		Mass<int> arr(3);
		arr.SetVal(0, 2);
	}

	catch (out_of_range exception)
	{
		cout << "An exception was thrown " << exception.what() << endl;
	}
	catch (bad_alloc exception) {
		cout << "An exception was thrown " << exception.what() << endl;
	}
	catch (invalid_argument exception) {
		cout << "An exception was thrown " << exception.what() << endl;
	}

	a.print();

	a.setArr(i, 1);

	a.getArr(i);

	Mass Copy(a);

	Copy.print();

	a.Addition(Copy);

	a.print();

	a.Substruction(Copy);

	try
	{
		q.Distance(5);
	}
	catch (logic_error exception)
	{
		cout << "An exception was thrown " << exception.what() << endl;
	}

	catch (logic_error exception)
	{
		cout << "An exception was thrown " << exception.what() << endl;
	}

	a.print();

	a.Dobavznach(16);

	a.print();

}

