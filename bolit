#include <iostream>
using namespace std;

class Mass
{
private:
	int* arr, size;
public:
	Mass(int arrSize) {
		size = arrSize;
		arr = new int[size];

		for (int i = 0; i < size; i++) {
			arr[i] = i;
		}
	}
	~Mass() {
		delete arr;
	}

	Mass(Mass &Copy) {

		size = Copy.size;
		arr = new int[size];

		for (int i = 0; i < size; i++) {
			arr[i] = Copy.arr[i];
		}
	}



	void print() {
		for (int i = 0; i < size; i++) {
			cout << arr[i] << " ";
		}
		cout << endl;
	}

	void setArr(int i, int val) {
		if (arr[i] < -100 or arr[i] > 100) {
			cout << "ERROR" << endl;
		}
		if (i > size or i < 0) {
			cout << "ERROR" << endl;
		}
		else arr[i] = val;

	}

	int getArr(int i) {
		if (i > size || i < 0) {
			cout << "ERROR" << endl;

		}
		else return arr[i];
	}

	void Addition(Mass& Copy) {
		for (int i = 0; i < size; i++) {
			arr[i] = arr[i] + Copy.arr[i];
		}

	}

	void Substruction(Mass& Copy) {
		for (int i = 0; i < size; i++) {
			arr[i] = arr[i] - Copy.arr[i];
		}

	}

	void Dobavznach(int val) {

		if (val > -100 or val < 100) {

			size = size + 1;
			int* newArr = new int[size];
			for (int i = 0; i < size - 1; i++) {

				newArr[i] = arr[i];
			}
			delete arr;
			newArr[size - 1] = val;
			arr = newArr;


		}
	}

};



int main()
{
	int size = 0, i = 0;

	Mass a(5);

	a.print();

	a.setArr(i, 1);

	a.getArr(i);

	Mass Copy(a);

	Copy.print();

	a.Addition(Copy);

	a.print();

	a.Substruction(Copy);

	a.print();

	a.Dobavznach(16);

	a.print();

}
